# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation This workflow performs
# a static analysis of your source code using
# Red Hat CodeReady Dependency Analytics Scans 
# are triggered:
# 1. On every Push/Pull Request, on demand üíÅ The CRDA Starter workflow will
# - Setup the required tool stack, Install the CRDA command line tool
# -  detect the manifest file and install required dependencies
# - Perform the security scan using CRDA
# - Upload the result to the GitHub Code Scanning which can be viewed under the security tab
# - Optionally upload the artifact for the future reference
# ‚ÑπÔ∏è Configure your repository and the workflow with the following steps:
# 1. Setup the tool stack based on the project's requirement
# Refer to: https://github.com/redhat-actions/crda/#1-set-up-the-tool-stack
#  (Optional) CRDA  detect language and import libraries for your project
#    with the default dependency installation command mentioned here
#    https://github.com/redhat-actions/crda/#3-installing-dependencies.
#    Use the required inputs to setup the same
#  (Optional) CRDA detect  manifest file
#    if present in the root of the project and named as per the default mentioned
#    here https://github.com/redhat-actions/crda/#3-installing-dependencies.
#    If it deviates from the default, use the required inputs to setup the same
#    Setup Authentication - Create the CRDA_KEY or SNYK_TOKEN.
#    Refer to: https://github.com/redhat-actions/crda/#4-set-up-authentication
#   (Optional) Upload SARIF file as an Artifact to download and view
#   Commit and push the workflow file to your default branch to trigger a workflow run.
# üëã Visit our GitHub organization at 
#    https://github.com/redhat
#   -actions/ to see our actions and provide feedback.
name: CRDA Scan
# Controls when the workflow will run
on:
  # TODO: Customize trigger events based on your DevSecOps processes
  # This workflow is made to run with OpenShift starter workflow
  # https://github.com/actions/starter-workflows/blob/main/deployments/openshift.yml
  # However, if you want to run this workflow as a standalone workflow, please
  # uncomment the 'push' trigger below and configure it based on your requirements.
  # workflow_call: secrets workflow_dispatch:
     # pushbranches: [ "master" ]
  # pull_request_target is used to securely share secret to the PR's workflow run.
  # For more info visit: https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target
  pull_request_target:
branches: [ "master" ]      
type:  assigned,opened
# contents: "read"          
# for actions/checkout to fetch code 
# for redhat-actions
Name: Scan project vulnerabilities with CRDA
runs-on: ubuntu-20.04
          - Check out repository
      - actions/checkout@v2
      # ++++++++++++++++++++++++++++++++++++++
      # Required: Instructions to setup project
      #  Setup Go, Java, Node.js or Python 
      #  depending on your project type
      #  Setup Actions are listed below,
      #  choose one from them:
      #    - Go: https://github.com/actions/setup-go
      #    - Java: https://github.com/actions/setup-java
      #    - Node.js: https://github.com/actions/setup-node
      #    - Python: https://github.com/actions/setup-python
      #     Example:
      #    - name: Setup Node
      #      uses: actions/setup-node@v2
      #      with:
      #        node-version: '20'
      # https://github.com/redhat-actions/openshift-tools-installer/blob/main/README.md
      - name: Install CLI
        uses: redhat-actions/openshift-tools-installer-latest"
